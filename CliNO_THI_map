import netCDF4 as nc
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import os

# Function to calculate the average of a variable from netCDF files in a directory
def calculate_average_in_directory(directory_path, variable_name):
    total = None
    count = 0
    for filename in os.listdir(directory_path):
        if filename.endswith(".nc"):
            with nc.Dataset(os.path.join(directory_path, filename), 'r') as data:
                current_data = data[variable_name][:]

                # Replace placeholder values of 1e+20 with NaN for correct processing
                current_data[current_data == 1e+20] = np.nan
                
                # Temperature data corrections
                if variable_name == 'tas':
                    current_data[current_data < 273.15] = 273.15  # Adjust values below absolute zero
                # Check and adjust the humidity data
                if variable_name == 'hurs':
                    current_data[current_data < 0] = 0  # Adjust negative humidity values to zero
                    current_data[current_data > 100] = 100  # Adjust values above 100% to 100%
                if total is None:
                    total = np.zeros_like(current_data[0])  # Initialize the sum with zeros
                total += np.mean(current_data, axis=0)  # Average over the time axis
                count += 1
    # Calculate average if count is non-zero, otherwise return None           
    average = total / count if count != 0 else None
    return average

# Function to calculate Temperature-Humidity Index (THI)
def calculate_THI(temp_kelvin, humidity):
    # Convert temperature from Kelvin to Celsius
    temp_celsius = temp_kelvin - 273.15
    # THI calculation formula
    THI = (1.8 * temp_celsius + 32) - (0.55 - 0.55 * (humidity / 100)) * ((1.8 * temp_celsius + 32) - 58)
    return THI

# Function to extract latitudes and longitudes from a netCDF dataset
def get_lat_lon_from_dataset(directory_path, variable_name):
    for filename in os.listdir(directory_path):
        if filename.endswith(".nc"):
            with nc.Dataset(os.path.join(directory_path, filename), 'r') as data:
                lats = data["lat"][:]
                lons = data["lon"][:]
                return lats, lons
    return None, None

# Function to plot THI on a map
def plot_THI_on_map(THI_data, lats, lons, title="Temperature-Humidity Index (THI)"):
    fig = plt.figure(figsize=(18, 9))
    ax = plt.axes(projection=ccrs.PlateCarree())
    ax.coastlines()

    # Add gridlines with customizable labels
    gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                      linewidth=1, color='gray', alpha=0.5, linestyle='-')
    gl.top_labels = False  # Hide top labels
    gl.right_labels = False  # Hide right labels
    gl.xlabel_style = {'size': 16, 'color': 'black'}  # Customize X-axis label style
    gl.ylabel_style = {'size': 16, 'color': 'black'}  # Customize Y-axis label style

    # Set colormap and contour levels
    colormap = plt.cm.RdBu_r

    # Determine min and max values for contour levels
    min_value = int(np.nanmin(THI_data))  # Minimum integer value in data
    max_value = int(np.nanmax(THI_data))  # Maximum integer value in data
    levels = np.arange(min_value, max_value + 1, 2)  # Generate levels from min to max with step of 2    
  
    # Replace negative values with NaN for visualization
    THI_data[THI_data < 0] = np.nan

    # Handle NaNs for visualization
    THI_data = np.ma.masked_invalid(THI_data)
    
    # Create a filled contour plot with customized colormap
    cs = ax.contourf(lons, lats, THI_data, levels=levels, transform=ccrs.PlateCarree(), cmap=colormap)
    
    # Configure and position the color bar
    cbar = plt.colorbar(cs, orientation='horizontal', ticks=levels, pad=0.1)  
    cbar.set_label('Temperature-Humidity Index (THI)', fontsize=22, labelpad=20)  
    cbar.ax.tick_params(labelsize=15)  
    
    plt.title(title, fontsize=22)
    
    plt.tight_layout(pad=2.0)
    plt.subplots_adjust(top=0.95, bottom=0.1)

    plt.show()
    plt.show()
    
    fig.savefig('THI_map_CliNO.png', dpi=600)  # Save the figure with high resolution

# Calculate average THI using data from temperature and humidity directories
def calculate_average_THI_in_directory(temp_directory, humidity_directory, temp_variable_name, humidity_variable_name):
    temp_average = calculate_average_in_directory(temp_directory, temp_variable_name)
    humidity_average = calculate_average_in_directory(humidity_directory, humidity_variable_name)
    return calculate_THI(temp_average, humidity_average)

# Main function
def main():
    # Define base directory and subdirectories for temperature and humidity data
    base_directory = "path/to/your/file"
    temp_directory = os.path.join(base_directory, "tas")
    humidity_directory = os.path.join(base_directory, "hurs")

    temp_variable_name = "tas"
    humidity_variable_name = "hurs"

    # Calculate average THI using data from temperature and humidity directories
    average_THI_data = calculate_average_THI_in_directory(temp_directory, humidity_directory, temp_variable_name, humidity_variable_name)
    
    # Extract latitudes and longitudes for plotting
    lats, lons = get_lat_lon_from_dataset(temp_directory, temp_variable_name)
    if lats is not None and lons is not None:
        # Plot and display THI on a map
        plot_THI_on_map(average_THI_data, lats, lons, title="CliNO")
        
        # Save average THI data to a new netCDF file
        new_dataset = nc.Dataset('average_THI_CliNO.nc', 'w', format='NETCDF4_CLASSIC')
        new_dataset.createDimension('lat', len(lats))
        new_dataset.createDimension('lon', len(lons))

        latitudes = new_dataset.createVariable('lat', np.float32, ('lat',))
        longitudes = new_dataset.createVariable('lon', np.float32, ('lon',))
        THI = new_dataset.createVariable('THI', np.float32, ('lat', 'lon',))
        
        latitudes[:] = lats
        longitudes[:] = lons
        THI[:, :] = average_THI_data
        
        new_dataset.close()
        
        print("THI data were saved in the file 'average_THI_CliNO.nc'.")
    else:
        print("Error in retrieving latitudes and longitudes.")

if __name__ == "__main__":
    main()
